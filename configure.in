dnl# $Id$

AC_INIT(configure.in)
AM_INIT_AUTOMAKE(libast, 0.1)
AC_DEFINE_UNQUOTED(LIBAST_VERSION, "$VERSION")

dnl# Set some basic variables
AUTHORS="Michael Jennings (mej@eterm.org)"
AC_SUBST(AUTHORS)
AC_DEFINE_UNQUOTED(AUTHORS, "$AUTHORS")

AC_PROG_CC
AC_PROG_CPP

dnl# These must be run after AC_PROG_CC but before any other macros that use
dnl# the C compiler
AC_AIX
AC_ISC_POSIX
AC_MINIX

dnl# At least make the attempt to support CygWin32
AC_CYGWIN
AC_ARG_PROGRAM

AM_PROG_LIBTOOL

AC_GCC_TRADITIONAL

AC_PROG_INSTALL

dnl# Check for host system type
AC_CANONICAL_HOST

dnl# Check the sanity of what we've done so far
AM_SANITY_CHECK

dnl# Most people don't want the developer-only clutter
AM_MAINTAINER_MODE

dnl# If it's there, what the hell?
AM_WITH_DMALLOC

dnl# Look for needed programs
AC_CHECK_PROG(SED, sed, sed, false)
AC_CHECK_PROG(RM, rm, rm, true)
AC_CHECK_PROG(CP, cp, cp, false)
AC_CHECK_PROG(CHMOD, chmod, chmod, true)
AC_CHECK_PROG(TAR, tar, tar, tar)
AC_CHECK_PROG(MKDIR, mkdir, mkdir, false)
AC_CHECK_PROG(CTAGS, ctags, ctags, true)
AC_CHECK_PROG(AR, ar, ar, false)
AC_CHECK_PROG(MV, mv, mv, true)
AC_LN_S

AC_CHECK_SIZEOF(char, 1)
AC_CHECK_SIZEOF(short, 4)
AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(long, 4)
AC_CHECK_SIZEOF(void *, 4)
AC_CHECK_SIZEOF(long long, 8)
AC_C_BIGENDIAN

AC_C_CONST
AC_C_INLINE
AC_PATH_XTRA

if test ! -z "$X_CFLAGS"; then
  if test -z "$CPPFLAGS"; then
    CPPFLAGS="$X_CFLAGS"
  else
    CPPFLAGS="$CPPFLAGS $X_CFLAGS"
  fi
fi
if test ! -z "$X_LIBS"; then
  if test -z "$LDFLAGS"; then
    LDFLAGS="$X_LIBS"
  else
    LDFLAGS="$LDFLAGS $X_LIBS"
  fi
fi

dnl#
dnl# X LIBRARIES
dnl#
LIBAST_X11_SUPPORT=""
if test "x$no_x" != "xyes"; then
  AC_CHECK_LIB(X11, XOpenDisplay, LIBAST_X11_SUPPORT="X11" ; AC_DEFINE(LIBAST_X11_SUPPORT))
fi
AC_SUBST(LIBAST_X11_SUPPORT)

dnl# Checks for header files.
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h termios.h sys/ioctl.h sys/select.h sys/time.h sys/sockio.h sys/byteorder.h malloc.h \
utmpx.h unistd.h bsd/signal.h regex.h regexp.h stdarg.h)
AC_HEADER_TIME

dnl# Missing typedefs and replacements
AC_TYPE_MODE_T
AC_CHECK_TYPE(off_t, long)
AC_TYPE_PID_T
AC_TYPE_UID_T

dnl# Checks for library functions.
AC_TYPE_SIGNAL
AC_CHECK_FUNCS(memmove putenv strsep memmem usleep snprintf strcasestr strcasechr strcasepbrk strrev)
dps_snprintf_oflow()

dnl# Did they want debugging?
AC_MSG_CHECKING(for debugging level)
AC_ARG_WITH(debugging, [  --with-debugging[=num]  compile in debugging support.  num >= 0],
              if test "$withval" = "yes"; then
                  withval=4
              else
                  :
              fi
              if test "$withval" != "no"; then 
                  AC_MSG_RESULT($withval)
                  AC_DEFINE_UNQUOTED(DEBUG, $withval)
              else
                  AC_MSG_RESULT(no, disabling all debugging support)
                  AC_DEFINE_UNQUOTED(DEBUG, 0)
                  AC_WARN(*** Debugging support disabled.  Client programs will ***)
                  AC_WARN(*** not have access to any libast debugging routines! ***)
              fi, AC_MSG_RESULT(4)
                  AC_DEFINE_UNQUOTED(DEBUG, 4)
)

AC_ARG_WITH(imlib,
[  --with-imlib[=DIR]      compile with Imlib support (Imlib residing in DIR/lib) (default)],
            if test "$withval" != "no"; then 
              if test "$withval" != "yes"; then
                CPPFLAGS="$CPPFLAGS -I${withval}/include"
                LDFLAGS="$LDFLAGS -L${withval}/lib"
              fi
              USE_IMLIB=1
            else
              USE_IMLIB=0
            fi, USE_IMLIB=1
)
LIBAST_IMLIB2_SUPPORT=""
if test $USE_IMLIB -eq 1 ; then
  AC_CHECK_LIB(dl, dlopen, GRLIBS="-ldl", , $GRLIBS)
  AC_CHECK_LIB(ttf, TT_Init_FreeType, GRLIBS="-lttf $GRLIBS", , $GRLIBS)
  AC_CHECK_LIB(Imlib2, imlib_create_image,
               GRLIBS="-lImlib2 $GRLIBS"
               AC_DEFINE(LIBAST_IMLIB2_SUPPORT)
               LIBAST_IMLIB2_SUPPORT="Imlib2"
              ,
               AC_WARN(*** Imlib2 support has been disabled because Imlib2 ***)
               AC_WARN(*** was not found or could not be linked.           ***)
              , $GRLIBS)
fi
AC_SUBST(LIBAST_IMLIB2_SUPPORT)

AC_MSG_CHECKING(for MMX support)
HAVE_MMX=""
AC_ARG_ENABLE(mmx, [  --enable-mmx            enable MMX assembly routines],
               test x$enableval = xyes && HAVE_MMX="yes"
              ,
               if test x$build_os = xlinux-gnu; then
                 grep mmx /proc/cpuinfo >/dev/null 2>&1 && HAVE_MMX="yes"
               fi
              )
LIBAST_MMX_SUPPORT=""
if test -n "$HAVE_MMX"; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(LIBAST_MMX_SUPPORT)
  LIBAST_MMX_SUPPORT="MMX"
else
  AC_MSG_RESULT(no)
fi
AC_SUBST(LIBAST_MMX_SUPPORT)

CONFIG_BUFF_SIZE=20480
AC_MSG_CHECKING(for the buffer size of the config file parser)
AC_ARG_WITH(config-buffer-size,
[  --with-config-buffer-size
                         specifies the size of the buffer Eterm uses for parsing the config file (default is 20 Kb)],
            if test "$withval" != "yes" -a "$withval" != "no"; then
              CONFIG_BUFF_SIZE=$withval
            fi)
AC_MSG_RESULT($CONFIG_BUFF_SIZE bytes)
AC_DEFINE_UNQUOTED(CONFIG_BUFF, $CONFIG_BUFF_SIZE)

CPPFLAGS=`eval eval eval eval eval echo "-I$includedir -I$prefix/include $CPPFLAGS"`
CPPFLAGS=`echo $CPPFLAGS | tr ' ' '\n' | uniq | grep -v NONE | tr '\n' ' '`
CFLAGS=${CFLAGS--O}
LDFLAGS=`eval eval eval eval eval echo "-L$libdir -L$prefix/lib ${LDFLAGS--O}"`
LDFLAGS=`echo $LDFLAGS | tr ' ' '\n' | uniq | grep -v NONE | tr '\n' ' '`
LIBS="$GRLIBS $X_PRE_LIBS $LIBS $X_EXTRA_LIBS"

AC_SUBST(CC)
AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)
AC_SUBST(LIBS)
AC_SUBST(THREADLIBS)

basedir=.

AM_CONFIG_HEADER(config.h)

AC_OUTPUT(Makefile test/Makefile libast-config libast.spec)
test -f libast-config && chmod 755 libast-config

echo "
$PACKAGE $VERSION
Configuration:
--------------

  Source code location:       $srcdir
  Host System Type:           $host
  Preprocessor:               $CC $CPPFLAGS
  Compiler:	              $CC $CFLAGS
  Linker:                     $CC $LDFLAGS $LIBS
  Install path:		      $prefix

  See src/feature.h for further configuration information.

  Now type 'make' to build $PACKAGE $VERSION.
"
